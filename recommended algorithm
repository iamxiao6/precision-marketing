USE `0005285040_pos`;
###从打好标签开始

##第一步,建立所有需要用到的表

CREATE INDEX index9 ON `pos_dining_order`(order_id,consumption_id,people_num,bill_date,member_id,created_org,status_code,order_property);
CREATE INDEX index8 ON `pos_order_dish`(order_dish_id,dish_id,dish_name,dish_num);
CREATE INDEX index10 ON `0005285040_baseinfo`.`ol_fans_sns_bind`(is_subscribed);

SELECT * FROM pos_dish_tag
TRUNCATE TABLE pos_dish_tag
DROP TABLE pos_dish_tag
#1.菜品基本信息表pos_dish_tag
CREATE TABLE `pos_dish_tag` (
 `dish_id` INT(11) DEFAULT NULL,
 `same_dish_id` INT(11) DEFAULT NULL,
 `dish_name` VARCHAR(50) DEFAULT NULL,
 `dish_type_name` VARCHAR(50) DEFAULT NULL,
 `dish_price` INT(11) DEFAULT NULL,
 `top_flag` INT(11) DEFAULT NULL,
`main_flag` INT(11) DEFAULT NULL,
dish_raw VARCHAR(50) DEFAULT NULL,
flag1 INT(11) DEFAULT NULL,
flag2 INT(11) DEFAULT NULL,
flag3 INT(11) DEFAULT NULL,
flag4 INT(11) DEFAULT NULL,
`order1` VARCHAR(50) DEFAULT NULL
) ENGINE=INNODB DEFAULT CHARSET=utf8;

CREATE INDEX index1 ON pos_dish_tag(dish_id,dish_name,dish_price,top_flag,main_flag);

#2.储存标签大类表 member_tag_att
	CREATE TABLE `member_tag_att` (
	  `att_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `att_name` VARCHAR(50) DEFAULT NULL,
	  `flag` TINYINT(4) DEFAULT '0' COMMENT '0--食材,1--热冷',
	  `avg` FLOAT UNSIGNED DEFAULT NULL COMMENT '店平均值',
	  `avg1` FLOAT DEFAULT NULL,
	  PRIMARY KEY (`att_id`),
	  UNIQUE KEY `att_name` (`att_name`)
	) ENGINE=INNODB AUTO_INCREMENT=189 DEFAULT CHARSET=utf8;

CREATE INDEX index2 ON member_tag_att(att_id,att_name,flag,avg1);

#3.消费记录简表 pos_consumption1
CREATE TABLE `pos_consumption1` (
`consumption_id` INT(10) UNSIGNED NOT NULL COMMENT '交易ID',
`member_id` INT(10) UNSIGNED NOT NULL DEFAULT '0' COMMENT '会员ID',
`need_pay_amount` DECIMAL(11,2) NOT NULL DEFAULT '0.00' COMMENT '应付金额',
`people_num` MEDIUMINT(8) UNSIGNED NOT NULL DEFAULT '0' COMMENT '用餐人数',
`bill_date` DATETIME DEFAULT '1900-01-01 00:00:00' COMMENT '结账时间',
`created_org` MEDIUMINT(8) UNSIGNED NOT NULL DEFAULT '0' COMMENT '店铺Id'
	) ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='消费记录简表';
CREATE INDEX index3 ON pos_consumption1(consumption_id,member_id,need_pay_amount,people_num,bill_date,created_org);


#4.消费次数>=2的表 member_tag_summary
CREATE TABLE `member_tag_summary` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` INT(11) NOT NULL,
  `nick_name` VARCHAR(53) DEFAULT NULL,
  `mobile` VARCHAR(50) DEFAULT NULL,
  `open_id` VARCHAR(58) DEFAULT NULL,
  `sum_all` INT(11) DEFAULT NULL,
  group_all INT(11) DEFAULT NULL,
  `zcount` INT(11) DEFAULT NULL,
  zc_count INT(11) DEFAULT NULL,
  `zn_count` INT(11) DEFAULT NULL,
  `zj_count` INT(11) DEFAULT NULL,
  `jccount` INT(11) DEFAULT NULL,
  `jjcount` INT(11) DEFAULT NULL,
  `motive` VARCHAR(50) DEFAULT NULL,
  `avg_con_days` DECIMAL(28,10) DEFAULT NULL,
  `min_con_date` DATETIME DEFAULT NULL,
  `last_con_date` DATETIME DEFAULT NULL,
  `last_con_days` INT(11) DEFAULT NULL,
  `member_con_type` VARCHAR(50) DEFAULT NULL,
  `top_type` VARCHAR(500) DEFAULT NULL,
  `bottom_type` VARCHAR(500) DEFAULT NULL,
  `ingredients_type` VARCHAR(500) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `member_id` (`member_id`)
) ENGINE=INNODB   DEFAULT CHARSET=utf8;

CREATE INDEX index4 ON member_tag_summary(member_id,sum_all,motive,member_con_type);

#5.会员数据总表(包含忠诚沉睡普通流失陪同潜在)
CREATE TABLE `member_all_summary` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` INT(11) NOT NULL,
  `nick_name` VARCHAR(53) DEFAULT NULL,
  `mobile` VARCHAR(50) DEFAULT NULL,
  `open_id` VARCHAR(58) DEFAULT NULL,
  `sum_all` INT(11) DEFAULT NULL,
    group_all INT(11) DEFAULT NULL,
  `zcount` INT(11) DEFAULT NULL,
  `zc_count` INT(11) DEFAULT NULL,
  `zn_count` INT(11) DEFAULT NULL,
  `zj_count` INT(11) DEFAULT NULL,
  `jccount` INT(11) DEFAULT NULL,
  `jjcount` INT(11) DEFAULT NULL,
  `motive` VARCHAR(50) DEFAULT NULL,
  `avg_con_days` DECIMAL(28,10) DEFAULT NULL,
  `min_con_date` DATETIME DEFAULT NULL,
  `last_con_date` DATETIME DEFAULT NULL,
  `last_con_days` INT(11) DEFAULT NULL,
  `member_con_type` VARCHAR(50) DEFAULT NULL,
  `top_type` VARCHAR(500) DEFAULT NULL,
  `bottom_type` VARCHAR(500) DEFAULT NULL,
  `ingredients_type` VARCHAR(500) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `member_id` (`member_id`)
) ENGINE=INNODB AUTO_INCREMENT=8192 DEFAULT CHARSET=utf8;
CREATE INDEX index5 ON member_all_summary(member_id,sum_all,motive,member_con_type);

#6.会员喜欢的菜品 member_fav_dish
	CREATE TABLE `member_fav_dish` (
	  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `member_id` INT(10) UNSIGNED DEFAULT NULL,
	  `dish_id` INT(10) UNSIGNED DEFAULT NULL,
	  `dish_name` VARCHAR(50) DEFAULT NULL,
	  `dish_raw` VARCHAR(50) DEFAULT NULL COMMENT '食材',
	  `percent` DECIMAL(10,0) DEFAULT NULL COMMENT '重复点选占比',
	  `flag` INT(4) DEFAULT NULL COMMENT '1-重复点选，2--猜你喜欢，3--物品协同算法',
	  dish_type  VARCHAR(30),
	  PRIMARY KEY (`id`),
	  KEY `member_id` (`member_id`),
	  KEY `dish_id` (`dish_id`)
	) ENGINE=INNODB AUTO_INCREMENT=512 DEFAULT CHARSET=utf8;

CREATE INDEX index6 ON member_fav_dish(member_id,dish_id,dish_name,flag,dish_type);

#7.菜品排行表 member_dish_top
	CREATE TABLE `member_dish_top` (
	  `dish_id` BIGINT(20) UNSIGNED NOT NULL,
	  `dish_name` VARCHAR(50) DEFAULT NULL,
	  `weight` FLOAT DEFAULT NULL,
	  `con_sum` BIGINT(20) DEFAULT NULL COMMENT '总消费次数',
	  PRIMARY KEY (`dish_id`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;

#8.会员偏好的食材 member_tag_summary_list
		CREATE TABLE `member_tag_summary_list` (
		  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
		  `member_id` INT(11) NOT NULL,
		  `att_id` INT(11) NOT NULL,
		  `percent` DECIMAL(10,0) DEFAULT NULL,
		  `flag` TINYINT(4) DEFAULT '0' COMMENT '属性标记',
		  PRIMARY KEY (`id`),
		  KEY `member_id` (`member_id`),
		  KEY att_id(att_id)

) ENGINE=INNODB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8;

#9.	物品协同的表	member_fav_top3
CREATE TABLE `member_fav_top3` (
		  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
		  `member_id` INT(10) UNSIGNED DEFAULT NULL,
		  `dish_id` INT(10) UNSIGNED DEFAULT NULL,
		  `rating` FLOAT DEFAULT NULL,
		  `flag` INT(4) DEFAULT NULL COMMENT '0-锅底，1--主菜',
		  PRIMARY KEY (`id`),
		  KEY `member_id` (`member_id`),
		  KEY `dish_id` (`dish_id`)
		) ENGINE=INNODB DEFAULT CHARSET=utf8;

#10.消费动机关联表 member_type_motive
CREATE TABLE `member_type_motive` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_con_type` VARCHAR(50) DEFAULT NULL COMMENT '会员类型',
  `motive` VARCHAR(50) DEFAULT NULL COMMENT '动机',
  `k1` FLOAT DEFAULT NULL,
  `k2` FLOAT DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=INNODB   DEFAULT CHARSET=utf8;

#11.只消费过一次的会员 member_normal
CREATE TABLE `member_normal` (
  `member_id` BIGINT(20) UNSIGNED NOT NULL,
  `last_con_date` DATE DEFAULT NULL,
  `dish_id_arr` VARCHAR(1000) DEFAULT NULL COMMENT '菜品ID列表',
  `dish_name_arr` VARCHAR(1000) DEFAULT NULL,
  `main_count` INT(11) DEFAULT NULL,
  `rem_dish_id` INT(10) UNSIGNED NOT NULL COMMENT '推荐菜品,点过相同菜的会员，取子集中最多点的',
  `dish_name` VARCHAR(50) DEFAULT NULL,
  `rem_dish_id1` INT(11) DEFAULT NULL COMMENT '如果有点过一样的菜的忠诚会员，取出其中最多的',
  PRIMARY KEY (`member_id`)
) ENGINE=INNODB DEFAULT CHARSET=utf8;

#12.只消费过一次的用户消费的菜品 member_normal_list
CREATE TABLE `member_normal_list` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` BIGINT(20) UNSIGNED NOT NULL,
  `dish_id` BIGINT(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `member_id` (`member_id`)
) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

#13.整理出所有2次以上会员消费过的菜品 member_dish_id_arr
CREATE TABLE `member_dish_id_arr` (
  `member_id` BIGINT(20) UNSIGNED NOT NULL,
  `dish_id_arr` VARCHAR(8000) DEFAULT NULL,
  PRIMARY KEY (`member_id`)
) ENGINE=INNODB DEFAULT CHARSET=utf8;

#14.member_dish_lst
CREATE TABLE `member_dish_lst` (
  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` BIGINT(20) UNSIGNED DEFAULT NULL,
  `dish_id` BIGINT(20) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `member_id` (`member_id`),
  KEY `dish_id` (`dish_id`)
) ENGINE=INNODB AUTO_INCREMENT=1  DEFAULT CHARSET=utf8;


#15.创建最后输出的菜品表
CREATE TABLE `dish_tag_end` (
  `member_id` VARCHAR(255) NOT NULL,
  `open_id` VARCHAR(255) NOT NULL,
  `sum_all` INT(11) DEFAULT NULL,
  `motive` VARCHAR(20) DEFAULT NULL,
  `member_con_type` VARCHAR(20) DEFAULT NULL,
  `dish_id` INT(11) DEFAULT NULL,
  `dish_name` VARCHAR(255) DEFAULT NULL,
  `reason` VARCHAR(255) DEFAULT NULL,
  `dish_price` INT(11) DEFAULT NULL,
  `money` INT(11) DEFAULT NULL,
  `usemoney` INT(11) DEFAULT NULL

) ENGINE=INNODB DEFAULT CHARSET=utf8;
CREATE INDEX index11 ON dish_tag_end(member_id,dish_id,dish_name,reason);

#____________________________________________________________________________________________________________________________________________________
TRUNCATE TABLE `pos_dish_tag`

SELECT * FROM pos_dish_tag
#8.(1)向菜品排行表里插入数据  `member_dish_top



	INSERT INTO `member_dish_top`(`dish_id`,`dish_name`,`con_sum`)
	#找出全店菜品排行,排除北京烧鸭
	SELECT dish.dish_id,dish.dish_name,COUNT(0)FROM pos_order_dish AS dish
	INNER JOIN pos_dining_order AS porder ON porder.order_id=dish.dining_order_id AND porder.created_org = dish.created_org
	INNER JOIN pos_dish_tag AS tag ON tag.dish_id=dish.dish_id AND tag.main_flag=1 AND top_flag=1 
	#AND top_type NOT LIKE '%锅底%'
	WHERE porder.status_code = 1  AND dish.dish_id<>1
	AND porder.order_property=1
	AND porder.bill_date>'2017-11-01 00:00:00'
	AND dish_num>0
	GROUP BY dish.dish_id
	ORDER BY COUNT(0) DESC ;

TRUNCATE TABLE `member_dish_top`


SELECT * FROM `pos_dish_tag`

#1.将需要执行的类别录入新的表

SELECT CONCAT('replace into `member_tag_att` (`att_name`,flag) value (''', dish_type_name,''',2);') AS in_sql
FROM pos_dish_tag WHERE dish_type_name IS NOT NULL   
GROUP BY dish_type_name#做法
UNION ALL
SELECT CONCAT('replace into `member_tag_att` (`att_name`,flag) value (''', dish_raw,''',1);') AS in_sql
FROM pos_dish_tag WHERE dish_raw IS NOT NULL   
GROUP BY dish_raw
UNION ALL
SELECT CONCAT('replace into `member_tag_att` (`att_name`,flag) value (''', dish_taste,''',3);') AS in_sql
FROM pos_dish_tag WHERE dish_taste IS NOT NULL   
GROUP BY dish_taste


#2.查看人均消费的金额
SELECT SUM(need_pay_amount)/SUM(people_num) FROM pos_consumption
WHERE status_code=1
AND order_property=1
AND member_id <>0

#查看几家门店有数据
SELECT created_org,COUNT(1) FROM pos_consumption
WHERE bill_date LIKE '2017-11-02%' 
AND status_code=1
GROUP BY created_org


#查看人均消费数据
SELECT consumption_id,SUM(need_pay_amount)/SUM(people_num) FROM pos_consumption
WHERE status_code=1
AND order_property=1
AND member_id <>0
GROUP BY consumption_id

#3.根据想要的方差计算出人均消费的金额(R),插入新的表 pos_consumption1 
	INSERT INTO pos_consumption1 
	SELECT consumption_id,member_id,need_pay_amount,people_num,bill_date,created_org FROM pos_consumption
	WHERE status_code=1
	AND order_property=1
	AND member_id <>0
	AND member_id <>1
	AND created_org IN (5,3)
	#AND people_num=1
	#AND need_pay_amount/people_num <=170 #人均消费低于250
	AND need_pay_amount/people_num >=20#人均消费高于10元
	GROUP BY consumption_id


#到店人均
SELECT SUM(need_pay_amount)/SUM(people_num)*0.8 INTO @avg_shop FROM `pos_consumption1` ;
#  @avg_shop
	
SELECT  COUNT(0) INTO @iCount 	FROM pos_dining_order AS porder
INNER JOIN `pos_consumption1` AS conn ON porder.consumption_id = conn.consumption_id AND porder.created_org = conn.created_org
WHERE   conn.people_num<=4;


#  @iCount


#4.(1)求食材平均值,取结果执行
	SELECT CONCAT('update `member_tag_att` set `avg`=', COUNT(0)/@iCount*100 ,' where  att_name=''', dish_raw, ''';') AS sss
	#SELECT CONCAT('replace into `member_tag_att`(att_name,`avg`) value (''',tag.dish_raw, ''',', COUNT(0)/@iCount*100,');') AS sss
	FROM pos_dining_order AS porder
	INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND porder.created_org=dish.created_org
	INNER JOIN pos_dish_tag AS tag ON dish.dish_id=tag.dish_id
	INNER JOIN `pos_consumption1` AS conn ON porder.consumption_id = conn.consumption_id AND porder.created_org = conn.created_org
	WHERE  
	 conn.people_num<=4
	AND  tag.main_flag=1   
	AND tag.dish_raw IS NOT NULL
	GROUP BY tag.dish_raw

#4.(2)求做法平均值,取结果执行
	SELECT 
	          #CONCAT('replace into `member_tag_att`(att_name,`avg`) value (''',dish_cookery, ''',', sum(percent_cookery)/@iCount,');') AS sss
	          CONCAT('update `member_tag_att` set `avg`=', SUM(percent_cookery)/@iCount ,' where  att_name=''', dish_cookery, ''';') AS sss
	          FROM 
	          (
	          #sum(单次订单口味数/单次订单菜品总数 )/sum(订单数)
	          SELECT tag.dish_cookery,COUNT(0)/dish_count AS percent_cookery, porder.order_id,porder.created_org 
	          FROM pos_order_dish AS dish
	          INNER JOIN pos_dish_tag AS tag ON tag.dish_id=dish.dish_id
	          INNER JOIN pos_dining_order AS porder ON porder.order_id=dish.dining_order_id AND porder.created_org=dish.created_org
	          #找出单个订单菜品数
	          INNER JOIN 
	          ( 
	          SELECT porder.order_id,porder.created_org,COUNT(0) AS dish_count
	          FROM pos_dining_order AS porder
	          INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND porder.created_org=dish.created_org
	          INNER JOIN pos_dish_tag AS tag ON tag.dish_id=dish.dish_id
	          WHERE  porder.people_num<=4
	         # AND porder.need_pay_amount>@avg_shop 
	          AND porder.status_code = 1  
	          AND dish.status_code=1  
	          AND tag.main_flag = 1
	          GROUP BY porder.order_id,porder.created_org
	          ) AS dcount ON dcount.order_id=porder.order_id AND porder.created_org=dcount.created_org
	          WHERE  porder.people_num<=4
	         # AND porder.need_pay_amount>@avg_shop  
	          AND porder.status_code = 1 
	          AND dish.status_code=1 
	          AND tag.main_flag = 1
	          GROUP BY porder.order_id,porder.created_org, tag.dish_cookery
	          ) 
	          AS sub_avg_cookery
	          GROUP BY sub_avg_cookery.dish_cookery;
	          
#4.(3) 求归一化的平均值
	SELECT SUM(att.avg) INTO @summ FROM `member_tag_att` AS att WHERE att.flag=1;
	
	UPDATE `member_tag_att`
	SET avg1=`member_tag_att`.`avg`/@summ * 100
	WHERE flag=1 ;
	
	
	SELECT SUM(att.avg) INTO @summ FROM `member_tag_att` AS att WHERE att.flag=2;
	
	UPDATE `member_tag_att`
	SET avg1=`member_tag_att`.`avg`/@summ * 100
	WHERE flag=2;
	
	SELECT SUM(att.avg) INTO @summ FROM `member_tag_att` AS att WHERE att.flag=3;
	
	UPDATE `member_tag_att`
	SET avg1=`member_tag_att`.`avg`/@summ * 100
	WHERE flag=3;
	
	SELECT SUM(att.avg) INTO @summ FROM `member_tag_att` AS att WHERE att.flag=4;
	
	UPDATE `member_tag_att`
	SET avg1=`member_tag_att`.`avg`/@summ * 100
	WHERE flag=4;
	
	SELECT SUM(att.avg) INTO @summ FROM `member_tag_att` AS att WHERE att.flag=5;
	
	UPDATE `member_tag_att`
	SET avg1=`member_tag_att`.`avg`/@summ * 100
	WHERE flag=5;
	



#得到店人均  ，在下面的查询中会使用到
SELECT SUM(porder.need_pay_amount)/SUM(porder.people_num)*0.8 INTO @avg_peo FROM `pos_consumption1` AS porder;


#得到店会员平均消费周期
SELECT SUM(porder_date_calc.datedif)/SUM(porder_date_calc.con_cou) *1.5 INTO @avg_pay FROM (
SELECT DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date)) AS datedif,COUNT(0)-1 AS con_cou
FROM `pos_consumption1` AS porder
INNER JOIN `rv_ol_fans` AS fan ON fan.`member_id` = porder.member_id
GROUP BY porder.member_id
HAVING COUNT(0)>1
)
AS porder_date_calc;
#@avg_pay
	
	
#5.用户录入member_tag_summary
INSERT INTO `member_tag_summary`
            (`member_id`,
             `nick_name`,
             `mobile`,
             `open_id`,
             `sum_all`,
             `zcount`,
             group_all,
             zc_count,
             `zn_count`,
             `zj_count`,
             `jjcount`,
             `jccount`,
             `motive`,
             `avg_con_days`,
             `min_con_date`,
             `last_con_date`,
             `last_con_days`,
             `member_con_type` ) 
SELECT cc.member_id,cc.nick_name,cc.mobile,cc.open_id,cc.sum_all,group_all,zcount,zc_count,zn_count,zj_count,jjcount,jccount,motivation,avg_con_days,min_con_date,last_con_date,last_con_days,member_con_type  
#,fav.dish_id,fav.dish_name,fav.dish_raw,fav.percent,fav.flag 
 FROM

(
#得到消费次数>=2的所有会员,member_id=1是店内员工使用
SELECT member_count.member_id,member_count.nick_name,member_count.mobile,member_count.open_id
,sum_all AS sum_all,
IFNULL(group_all.group_all,0) AS group_all,
IFNULL(zc_all.z_all,0) AS zcount,
IFNULL(zc_danren.z_all,0) AS zc_count,
IFNULL(zc_normal.z_all,0) AS zn_count,
IFNULL(zc_group.z_all,0) AS zj_count,
IFNULL(jc_group.jc_group,0) AS jjcount,
IFNULL(jc_all.z_all,0) AS jccount,

#输出中文显示
CASE 
	#聚餐订单数/总订单数>50%
	WHEN IFNULL(group_all.group_all,0)/IFNULL(member_count.sum_all,0)>0.5
		THEN 
		CASE WHEN IFNULL(zc_group.z_all,0)>=IFNULL(jc_group.jc_group,0) THEN '正餐聚餐'
		ELSE '简餐聚餐'
		END 
	
#常规正餐：≥简餐  and ≥正餐聚餐 and ≥常规单人
	ELSE 
		CASE WHEN IFNULL(zc_all.z_all,0)>=IFNULL(jc_all.z_all,0) 
  
 # AND IFNULL(zc_normal.z_all,0)>=IFNULL(zc_group.z_all,0) AND IFNULL(zc_all.z_all,0)>=(member_count.sum_all-IFNULL(zc_all.z_all,0)-IFNULL(jc_all.z_all,0))
			THEN #'常规正餐' 
			CASE
			WHEN IFNULL(zc_normal.z_all,0)>=IFNULL(zc_group.z_all,0) THEN '正餐常规'
			ELSE '正餐单人'
			END
		ELSE '简餐用户'
		END

 END 
AS motivation
,member_days.avg_con_days,member_days.min_con_date,member_days.last_con_date,member_days.last_con_days,member_days.member_con_type,mcard.`card_face_number`

FROM (
SELECT fan.member_id, sum_all,fan.nick_name,fan.mobile,bind.open_id  FROM (
SELECT member_id, COUNT(0) AS sum_all FROM   `pos_consumption1` AS conn
GROUP BY conn.member_id
HAVING COUNT(0)>=2 ORDER BY COUNT(0) DESC) AS abc
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= abc.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id AND bind.sns_type=1 AND bind.`is_subscribed`=1
) AS member_count 
  
LEFT JOIN ( 
#得到正餐订单数
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo 
GROUP BY conn.member_id HAVING COUNT(0)>1
) AS zc_all ON zc_all.member_id = member_count.member_id

#得到常规单人订单数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE  conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num=1
GROUP BY conn.member_id  ) AS zc_danren ON  member_count.member_id = zc_danren.member_id

#得到常规正餐订单数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num>=2 AND conn.people_num<=4
GROUP BY conn.member_id  ) AS zc_normal ON  member_count.member_id = zc_normal.member_id
#得到聚餐正餐人数
#得到简餐用户
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num<=@avg_peo 
GROUP BY conn.member_id
) AS jc_all ON jc_all.member_id = member_count.member_id
#聚餐总数
LEFT JOIN (
SELECT member_id, COUNT(0) AS group_all FROM   `pos_consumption1` AS conn 
WHERE   conn.people_num>4
GROUP BY conn.member_id ) AS group_all ON  member_count.member_id = group_all.member_id
#简餐聚餐数
LEFT JOIN (
SELECT member_id, COUNT(0) AS jc_group FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num<=@avg_peo AND conn.people_num>4
GROUP BY conn.member_id ) AS jc_group ON  member_count.member_id = jc_group.member_id
#得到聚餐正餐数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num>4
GROUP BY conn.member_id ) AS zc_group ON  member_count.member_id = zc_group.member_id


LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = member_count.member_id 

#用户细分
LEFT JOIN (
SELECT porder.member_id,
         DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)
          AS avg_con_days,
          MIN(porder.bill_date) min_con_date,MAX(porder.bill_date) last_con_date,
          DATEDIFF(NOW(), MAX(porder.bill_date)) last_con_days,
          CASE WHEN COUNT(0)>2 AND DATEDIFF(NOW(), MAX(porder.bill_date))<= DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)*1.5
            THEN '忠诚用户1'
            WHEN COUNT(0)=2 AND DATEDIFF(NOW(), MAX(porder.bill_date))<= @avg_pay
            THEN '忠诚用户2'
            WHEN COUNT(0)>2 AND DATEDIFF(NOW(), MAX(porder.bill_date))> DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)*1.5
            THEN '沉睡用户1'
            WHEN COUNT(0)=2 AND DATEDIFF(NOW(), MAX(porder.bill_date))> @avg_pay
            THEN '沉睡用户2'
            ELSE '' 
          END
          AS 'member_con_type'
  FROM pos_consumption1 AS porder
       INNER JOIN `rv_ol_fans` AS fan ON fan.`member_id` = porder.member_id
       INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
 
GROUP BY porder.member_id
HAVING COUNT(0) > 1
) AS member_days ON member_days.member_id=member_count.member_id


) AS cc

WHERE cc.motivation IN('正餐单人','正餐常规','简餐用户')





#6.用户信息录入总表 member_all_summary

INSERT INTO  `member_all_summary`
(member_id,
nick_name,
mobile,
open_id,
sum_all,
group_all,
zcount,
zc_count,
zn_count,
zj_count,
jccount,
jjcount,
motive,
avg_con_days,
min_con_date,
last_con_date,
last_con_days,
member_con_type)



SELECT cc.member_id,cc.nick_name,cc.mobile,cc.open_id,cc.sum_all,group_all,zcount,zc_count,zn_count,zj_count,jjcount,jccount,motivation,avg_con_days,min_con_date,last_con_date,last_con_days,member_con_type  
#,fav.dish_id,fav.dish_name,fav.dish_raw,fav.percent,fav.flag 
 FROM

(
#得到消费次数>=2的所有会员,member_id=1是店内员工使用
SELECT member_count.member_id,member_count.nick_name,member_count.mobile,member_count.open_id
,sum_all AS sum_all,
IFNULL(group_all.group_all,0) AS group_all,
IFNULL(zc_all.z_all,0) AS zcount,
IFNULL(zc_danren.z_all,0) AS zc_count,
IFNULL(zc_normal.z_all,0) AS zn_count,
IFNULL(zc_group.z_all,0) AS zj_count,
IFNULL(jc_group.jc_group,0) AS jjcount,
IFNULL(jc_all.z_all,0) AS jccount,

#输出中文显示
CASE 
	#聚餐订单数/总订单数>50%
	WHEN IFNULL(group_all.group_all,0)/IFNULL(member_count.sum_all,0)>0.5
		THEN 
		CASE WHEN IFNULL(zc_group.z_all,0)>=IFNULL(jc_group.jc_group,0) THEN '正餐聚餐'
		ELSE '简餐聚餐'
		END 
	
#常规正餐：≥简餐  and ≥正餐聚餐 and ≥常规单人
	ELSE 
		CASE WHEN IFNULL(zc_all.z_all,0)>=IFNULL(jc_all.z_all,0) 
  
 # AND IFNULL(zc_normal.z_all,0)>=IFNULL(zc_group.z_all,0) AND IFNULL(zc_all.z_all,0)>=(member_count.sum_all-IFNULL(zc_all.z_all,0)-IFNULL(jc_all.z_all,0))
			THEN #'常规正餐' 
			CASE
			WHEN IFNULL(zc_normal.z_all,0)>=IFNULL(zc_group.z_all,0) THEN '正餐常规'
			WHEN IFNULL(zc_danren.z_all,0)>IFNULL(zc_normal.z_all,0) THEN '正餐单人'
			END
		ELSE '简餐用户'
		END

 END 
AS motivation
,member_days.avg_con_days,member_days.min_con_date,member_days.last_con_date,member_days.last_con_days,member_days.member_con_type,mcard.`card_face_number`

FROM (
SELECT fan.member_id, sum_all,fan.nick_name,fan.mobile,bind.open_id  FROM (
SELECT member_id, COUNT(0) AS sum_all FROM   `pos_consumption1` AS conn
GROUP BY conn.member_id
HAVING COUNT(0)>=2 ORDER BY COUNT(0) DESC) AS abc
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= abc.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id AND bind.sns_type=1 AND bind.`is_subscribed`=1
) AS member_count 
  
LEFT JOIN ( 
#得到正餐订单数
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo 
GROUP BY conn.member_id HAVING COUNT(0)>1
) AS zc_all ON zc_all.member_id = member_count.member_id

#得到常规单人订单数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE  conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num=1
GROUP BY conn.member_id  ) AS zc_danren ON  member_count.member_id = zc_danren.member_id

#得到常规正餐订单数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num>=2 AND conn.people_num<=4
GROUP BY conn.member_id  ) AS zc_normal ON  member_count.member_id = zc_normal.member_id
#得到聚餐正餐人数
#得到简餐用户
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num<=@avg_peo 
GROUP BY conn.member_id
) AS jc_all ON jc_all.member_id = member_count.member_id
#聚餐总数
LEFT JOIN (
SELECT member_id, COUNT(0) AS group_all FROM   `pos_consumption1` AS conn 
WHERE   conn.people_num>4
GROUP BY conn.member_id ) AS group_all ON  member_count.member_id = group_all.member_id
#简餐聚餐数
LEFT JOIN (
SELECT member_id, COUNT(0) AS jc_group FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num<=@avg_peo AND conn.people_num>4
GROUP BY conn.member_id ) AS jc_group ON  member_count.member_id = jc_group.member_id
#得到聚餐正餐数
LEFT JOIN (
SELECT member_id, COUNT(0) AS z_all FROM   `pos_consumption1` AS conn 
WHERE conn.need_pay_amount/conn.people_num>@avg_peo AND conn.people_num>4
GROUP BY conn.member_id ) AS zc_group ON  member_count.member_id = zc_group.member_id


LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = member_count.member_id 

#用户细分
LEFT JOIN (
SELECT porder.member_id,
         DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)
          AS avg_con_days,
          MIN(porder.bill_date) min_con_date,MAX(porder.bill_date) last_con_date,
          DATEDIFF(NOW(), MAX(porder.bill_date)) last_con_days,
          CASE WHEN COUNT(0)>2 AND DATEDIFF(NOW(), MAX(porder.bill_date))<= DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)*1.5
            THEN '忠诚用户1'
            WHEN COUNT(0)=2 AND DATEDIFF(NOW(), MAX(porder.bill_date))<= @avg_pay
            THEN '忠诚用户2'
            WHEN COUNT(0)>2 AND DATEDIFF(NOW(), MAX(porder.bill_date))> DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date))/ (COUNT(0) - 1)*1.5
            THEN '沉睡用户1'
            WHEN COUNT(0)=2 AND DATEDIFF(NOW(), MAX(porder.bill_date))> @avg_pay
            THEN '沉睡用户2'
            ELSE '' 
          END
          AS 'member_con_type'
  FROM pos_consumption1 AS porder
       INNER JOIN `rv_ol_fans` AS fan ON fan.`member_id` = porder.member_id
       INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
 
GROUP BY porder.member_id
HAVING COUNT(0) > 1
) AS member_days ON member_days.member_id=member_count.member_id






UNION ALL
#普通会员   消费次数=1次，消费间隔<=平均沉睡周期






SELECT conn.member_id,fan.nick_name,fan.mobile,bind.open_id, COUNT(0) AS sum_all,0 AS group_all,0 AS zcount,0 AS zc_count,0 AS zn_count,0 AS zj_count,1 AS jjcount,0 AS jccount,
CASE WHEN people_num>4 THEN '普通聚餐'
	ELSE CASE WHEN need_pay_amount/people_num >@avg_pay THEN '普通正餐'
		ELSE '普通简餐'
		END
	END


 AS motivation, 
0 AS avg_con_days, conn.bill_date AS  min_con_date, conn.bill_date AS last_con_date,DATEDIFF(NOW(),conn.bill_date) AS  last_con_days,'普通用户' AS member_con_type
,mcard.`card_face_number`


#SELECT conn.member_id,fan.nick_name,fan.mobile,  COUNT(0) AS sum_all,conn.need_pay_amount ,'普通用户' AS member_con_type,mcard.`card_face_number`
FROM   `pos_consumption1` AS conn
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= conn.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id)  ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = fan.member_id 
GROUP BY conn.member_id
HAVING COUNT(0)=1  AND DATEDIFF(NOW(),conn.bill_date)<=@avg_pay

UNION ALL

#流失会员   消费次数=1次，消费间隔>平均沉睡周期

SELECT conn.member_id,fan.nick_name,fan.mobile,bind.open_id, COUNT(0) AS sum_all,0 AS group_all,0 AS zcount,0  AS zc_count,0 AS zn_count,0 AS zj_count,1 AS jjcount,0 AS jccount,
CASE WHEN people_num>4 THEN '流失聚餐'
	ELSE CASE WHEN need_pay_amount/people_num >@avg_pay THEN '流失正餐'
		ELSE '流失简餐'
		END
	END
 AS motivation, 
0 AS avg_con_days, conn.bill_date AS  min_con_date, conn.bill_date AS last_con_date,DATEDIFF(NOW(),conn.bill_date) AS  last_con_days,'流失用户' AS member_con_type
,mcard.`card_face_number`

#SELECT conn.member_id, fan.nick_name,fan.mobile,COUNT(0) AS sum_all,0,'流失用户' AS member_con_type,mcard.`card_face_number`
FROM   `pos_consumption1` AS conn
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= conn.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = fan.member_id 
GROUP BY conn.member_id
HAVING COUNT(0)=1 AND DATEDIFF(NOW(),conn.bill_date)>@avg_pay   

UNION ALL

#陪同用户，没有消费记录
SELECT   
 fan.member_id, fan.nick_name,fan.mobile,bind.open_id,0    AS sum_all ,0 AS group_all,0 AS zcount,0 AS zc_count,0 AS zn_count,0 AS zj_count,0 AS jjcount,0 AS jccount,
'-' AS motivation, 
0 AS avg_con_days, conn.bill_date AS  min_con_date, conn.bill_date AS last_con_date,DATEDIFF(NOW(),conn.bill_date) AS  last_con_days,'陪同用户' AS member_con_type
,'' AS `card_face_number`

FROM    `rv_ol_fans` AS fan 
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
LEFT JOIN pos_consumption1 AS conn ON conn.member_id=fan.member_id
#LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = fan.member_id 
WHERE  fan.member_id<>0 AND  conn.member_id IS NULL AND fan.source_type IN(3,4,6,14,18,19)  # 来源类型（1-自行关注，2-通过砍价活动关注，3-通过扫描POS台单关注）

UNION ALL
#潜在用户，消费次数为0,非店内关注
SELECT   
fan.member_id, fan.nick_name,fan.mobile,bind.open_id,0    AS sum_all ,0 AS group_all,0 AS zcount,0 AS zc_count,0 AS zn_count,0 AS zj_count,0 AS jjcount,0 AS jccount, 
'-' AS motivation, 
0 AS avg_con_days, conn.bill_date AS  min_con_date, conn.bill_date AS last_con_date,DATEDIFF(NOW(),conn.bill_date) AS  last_con_days,'潜在用户' AS member_con_type
,'' AS `card_face_number`
FROM    `rv_ol_fans` AS fan 
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id  AND bind.sns_type=1 AND bind.`is_subscribed`=1
LEFT JOIN pos_consumption1 AS conn ON conn.member_id=fan.member_id
#LEFT JOIN `0005285040_member`.`mem_card` AS mcard ON mcard.member_id = fan.member_id 
WHERE  fan.member_id<>0 AND  conn.member_id IS NULL AND fan.source_type NOT IN(3,4,6,14,18,19)


ORDER BY member_id DESC

 
) AS cc  
 

 
 
 
 #7.清除用户表里重复的member_id
 	CREATE TABLE tmp AS SELECT  MIN(xx.id) AS aid FROM `member_tag_summary` AS xx GROUP BY xx.member_id HAVING COUNT(0)>1;
	
	DELETE FROM `member_tag_summary` 
	WHERE `member_tag_summary`.`id` IN (SELECT  aid FROM tmp) ;
	
	
	DROP TABLE tmp;
	

	CREATE TABLE tmp AS SELECT  MIN(xx.id) AS aid FROM `member_all_summary` AS xx GROUP BY xx.member_id HAVING COUNT(0)>1;
	
	DELETE FROM `member_all_summary` 
	WHERE `member_all_summary`.`id` IN (SELECT  aid FROM tmp) ;
	
	
	DROP TABLE tmp;
	
	


#8.(2)更新菜品权重
	UPDATE `member_dish_top` 
	INNER JOIN (
	SELECT SUM(con_sum) AS summ FROM `member_dish_top`
	) AS sub_sum ON 1=1
	SET `member_dish_top`.`weight` = 1+`member_dish_top`.`con_sum`/sub_sum.summ/100  

CREATE TABLE member_dish_top1 LIKE member_dish_top;

INSERT INTO `member_dish_top1`	
SELECT a.dish_id,a.dish_name, 
CASE WHEN b.flag1 !='' THEN ROUND(weight *3.375,4)
	ELSE CASE WHEN b.flag2  !=''  THEN ROUND(weight*2.25,4)
	END
END AS 'weight'
,con_sum
FROM `member_dish_top` AS a INNER JOIN `pos_dish_tag`AS b ON a.dish_id =b.dish_id


TRUNCATE TABLE member_dish_top;

INSERT INTO member_dish_top
SELECT dish_id,dish_name,weight,con_sum FROM member_dish_top1;

DROP TABLE member_dish_top1

#得到店人均  ，在下面的查询中会使用到

SELECT SUM(porder.need_pay_amount)/SUM(porder.people_num)*0.8 INTO @avg_shop FROM pos_dining_order AS porder
WHERE porder.status_code=1;
SELECT  @avg_shop;


#9.(1)推荐食材---重复点选(不区分级别)
	INSERT INTO  `member_fav_dish`
		            ( 
		             `member_id`,
		             `dish_id`,
		             `dish_name`,
		             `dish_raw`,
		             `percent`,
		             `flag`,
		             dish_type
		             )
		SELECT a.member_id,a.dish_id, a.dish_name,a.dish_raw,a.percent,a.flag,a.dish_type FROM 
		(
		SELECT conn.member_id,
		dish.`dish_id`,
		top.dish_name,
		NULL AS dish_raw,
		top.order1,
		SUM(dish.dish_num)/mm.sum_all * 100 AS `percent`,top.con_sum,1  AS `flag` ,  
		'重复点选' AS dish_type FROM   `pos_consumption1` AS conn 
		INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
		INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
		INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org
		INNER JOIN (SELECT a.dish_id,a.dish_name,b.con_sum,a.top_flag,a.order1 FROM `pos_dish_tag` AS a INNER JOIN `member_dish_top`AS b ON a.dish_id=b.dish_id WHERE main_flag=1) AS top ON top.dish_id =dish.dish_id
		#left join `member_dish_top`as top on tag.dish_id=dish.dish_id 
		WHERE 
		 conn.people_num<=4
		AND mm.sum_all>=2  AND top.top_flag=1 
		AND dish.dish_num>0
		#AND conn.member_id ='22995'
		GROUP BY conn.member_id,dish.`dish_id`
		HAVING `percent`>50
		ORDER BY percent DESC,con_sum DESC ,order1
		) a
		GROUP BY member_id

#9.(1)推荐食材---重复点选(区分级别)

CREATE TABLE `top4` (
  `dish_id` BIGINT(20) UNSIGNED NOT NULL,
  `dish_name` VARCHAR(50) DEFAULT NULL,
  `weight` FLOAT DEFAULT NULL,
  `con_sum` BIGINT(20) DEFAULT NULL COMMENT '总消费次数',
  PRIMARY KEY (`dish_id`)
) ENGINE=INNODB DEFAULT CHARSET=utf8;

INSERT INTO top4
SELECT tag.dish_id,tag.dish_name,top.weight,top.con_sum 
FROM `member_dish_top` AS top INNER JOIN `pos_dish_tag` AS tag ON tag.dish_id=top.dish_id
WHERE tag.flag4 !=0

INSERT INTO  `member_fav_dish`
		            ( 
		             `member_id`,
		             `dish_id`,
		             `dish_name`,
		             `dish_raw`,
		             `percent`,
		             `flag`,
		             dish_type
		             )





SELECT a.member_Id,
CASE WHEN percent1>=percent2/1.5 AND percent1>=percent3/(1.5 *1.5) AND percent1>=percent4/(1.5 *1.5*1.5) THEN z
ELSE
	CASE WHEN percent2/1.5 >percent1 AND percent2 >=percent3/(1.5) AND percent2 >=percent4/(1.5*1.5) THEN c
	ELSE
		CASE WHEN percent3/(1.5*1.5) > percent1 AND percent3/(1.5) >percent2 AND percent3 >=percent4/1.5 THEN v
		ELSE b
		END
	END
END AS dish_id,
CASE WHEN percent1>=percent2/1.5 AND percent1>=percent3/(1.5 *1.5) AND percent1>=percent4/(1.5 *1.5*1.5) THEN dish_name1
ELSE
	CASE WHEN percent2/1.5 >percent1 AND percent2 >=percent3/(1.5) AND percent2 >=percent4/(1.5*1.5) THEN dish_name2
	ELSE
		CASE WHEN percent3/(1.5*1.5) > percent1 AND percent3/(1.5) >percent2 AND percent3 >=percent4/1.5 THEN dish_name3
		ELSE dish_name4
		END
	END
END AS 'dish_name',
CASE WHEN a1>0 THEN a1
	ELSE CASE WHEN a2>0 THEN a2
		ELSE CASE WHEN a3>0 THEN a3 
			ELSE a4 
			END 
	END 
END AS '点选次数',
CASE WHEN percent1>=percent2/1.5 AND percent1>=percent3/(1.5 *1.5) AND percent1>=percent4/(1.5 *1.5*1.5) THEN percent1
ELSE
	CASE WHEN percent2/1.5 >percent1 AND percent2 >=percent3/(1.5) AND percent2 >=percent4/(1.5*1.5) THEN percent2
	ELSE
		CASE WHEN percent3/(1.5*1.5) > percent1 AND percent3/(1.5) >percent2 AND percent3 >=percent4/1.5 THEN percent3
		ELSE percent4
		END
	END
END AS 'percent',1 AS flag, '重复点选' AS dish_type
		
 FROM 

(SELECT z.member_id,a.dish_id AS z,b.dish_id AS c,c.dish_id AS v,d.dish_id AS b,
a.dish_raw AS a1,b.dish_raw AS a2 ,c.dish_raw AS a3,d.dish_raw AS a4,
IFNULL(a.dish_name1,0) AS dish_name1,IFNULL(a.percent1,0)AS percent1,IFNULL(b.dish_name2,0)AS dish_name2,
IFNULL(b.percent2,0) AS percent2,IFNULL(c.dish_name3,0) AS dish_name3,
IFNULL(c.percent3,0) AS percent3,IFNULL(d.dish_name4,0) AS dish_name4,
IFNULL(d.percent4,0) AS percent4 FROM  `member_tag_summary`AS z LEFT JOIN
#top1	
	(SELECT a.member_id,a.dish_id, a.dish_name AS dish_name1,a.dish_raw,a.percent AS percent1,a.flag,a.dish_type FROM 
		(
		SELECT conn.member_id,dish.`dish_id`,top.dish_name,COUNT(0) AS dish_raw,top.order1,
		SUM(dish.dish_num)/mm.sum_all * 100 AS `percent`,top.con_sum,1  AS `flag` ,  
		'重复点选' AS dish_type FROM   `pos_consumption1` AS conn 
		INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
		INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
		INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org
		INNER JOIN (SELECT a.dish_id,a.dish_name,b.con_sum,a.top_flag,a.order1 FROM `pos_dish_tag` AS a INNER JOIN top1 AS b ON a.dish_id=b.dish_id WHERE main_flag=1 ) AS top ON top.dish_id =dish.dish_id
		#left join `member_dish_top`as top on tag.dish_id=dish.dish_id 
		WHERE conn.people_num<=4
		AND mm.sum_all>=2  AND top.top_flag=1 
		AND dish.dish_num>0
		#AND conn.member_id ='22995'
		GROUP BY conn.member_id,dish.`dish_id`
		HAVING `percent`>50
		ORDER BY percent DESC,con_sum DESC,order1
		) a
		GROUP BY member_id) a  ON a.member_id=z.member_id
LEFT JOIN 
#top2
		(SELECT a.member_id,a.dish_id, a.dish_name AS dish_name2,a.dish_raw,a.percent AS percent2,a.flag,a.dish_type FROM 
		(
		SELECT conn.member_id,dish.`dish_id`,top.dish_name,COUNT(0) AS dish_raw,top.order1,
		SUM(dish.dish_num)/mm.sum_all * 100 AS `percent`,top.con_sum,1  AS `flag` ,  
		'重复点选' AS dish_type FROM   `pos_consumption1` AS conn 
		INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
		INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
		INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org
		INNER JOIN (SELECT a.dish_id,a.dish_name,b.con_sum,a.top_flag,a.order1 FROM `pos_dish_tag` AS a INNER JOIN top2 AS b ON a.dish_id=b.dish_id WHERE main_flag=1 ) AS top ON top.dish_id =dish.dish_id
		#left join `member_dish_top`as top on tag.dish_id=dish.dish_id 
		WHERE conn.people_num<=4
		AND mm.sum_all>=2  AND top.top_flag=1 
		AND dish.dish_num>0
		#AND conn.member_id ='22995'
		GROUP BY conn.member_id,dish.`dish_id`
		HAVING `percent`>70
		ORDER BY percent DESC,con_sum DESC,order1
		) a
		GROUP BY member_id) b ON  b.member_id=z.member_id
		
LEFT JOIN 		
#top3
		(SELECT a.member_id,a.dish_id, a.dish_name AS dish_name3,a.dish_raw,a.percent AS percent3,a.flag,a.dish_type FROM 
		(
		SELECT conn.member_id,dish.`dish_id`,top.dish_name,COUNT(0) AS dish_raw,top.order1,
		SUM(dish.dish_num)/mm.sum_all * 100 AS `percent`,top.con_sum,1  AS `flag` ,  
		'重复点选' AS dish_type FROM   `pos_consumption1` AS conn 
		INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
		INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
		INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org
		INNER JOIN (SELECT a.dish_id,a.dish_name,b.con_sum,a.top_flag,a.order1 FROM `pos_dish_tag` AS a INNER JOIN top3 AS b ON a.dish_id=b.dish_id WHERE main_flag=1 ) AS top ON top.dish_id =dish.dish_id
		#left join `member_dish_top`as top on tag.dish_id=dish.dish_id 
		WHERE conn.people_num<=4
		AND mm.sum_all>=2  AND top.top_flag=1 
		AND dish.dish_num>0
		#AND conn.member_id ='22995'
		GROUP BY conn.member_id,dish.`dish_id`
		HAVING `percent`>70
		ORDER BY percent DESC,con_sum DESC,order1
		) a
		GROUP BY member_id) AS c ON c.member_id=z.member_id

#top4		
LEFT JOIN (		SELECT a.member_id,a.dish_id, a.dish_name AS dish_name4,a.dish_raw,a.percent AS percent4,a.flag,a.dish_type FROM 
		(
		SELECT conn.member_id,dish.`dish_id`,top.dish_name,COUNT(0) AS dish_raw,top.order1,
		SUM(dish.dish_num)/mm.sum_all * 100 AS `percent`,top.con_sum,1  AS `flag` ,  
		'重复点选' AS dish_type FROM   `pos_consumption1` AS conn 
		INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
		INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
		INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org
		INNER JOIN (SELECT a.dish_id,a.dish_name,b.con_sum,a.top_flag,a.order1 FROM `pos_dish_tag` AS a INNER JOIN top4 AS b ON a.dish_id=b.dish_id WHERE main_flag=1 ) AS top ON top.dish_id =dish.dish_id
		#left join `member_dish_top`as top on tag.dish_id=dish.dish_id 
		WHERE conn.people_num<=4
		AND mm.sum_all>=2  AND top.top_flag=1 
		AND dish.dish_num>0
		#AND conn.member_id ='22995'
		GROUP BY conn.member_id,dish.`dish_id`
		HAVING `percent`>70
		ORDER BY percent DESC,con_sum DESC,order1
		) a
		GROUP BY member_id) d ON d.member_id=z.member_id) a
		WHERE (a.percent1 +a.percent2+a.percent3+a.percent4) !=0;

#10 找出会员食材/口味/做法等偏好,替换dish_raw


	REPLACE INTO `member_tag_summary_list`(member_id,att_id,percent,flag)
			SELECT member_id,att_id, 
			CASE 
			   WHEN percent>=`avg`*3 THEN 16
			   
			   ELSE percent/`avg`*5
			END
			AS final_percent,
			1 AS flag  
			
			  FROM
			(
			SELECT member_id,(SELECT att_id FROM member_tag_att AS att WHERE att.att_name= dish_raw) AS att_id,
			att.`avg`,	att.flag,
			dish_raw, MAX(raw_weight) AS raw_weight,sum1,percent FROM 
			(
			SELECT * FROM (
SELECT conn.member_id,dish.dish_id ,tag.dish_raw,SUM(dish.dish_num) AS sum1,COUNT(1)/sum_all* 100 AS percent,
(1-(SELECT avg1 FROM member_tag_att AS att WHERE att.att_name=tag.dish_raw)) * COUNT(0)/sum_all AS raw_weight
 FROM `pos_consumption1` AS conn  
			INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id AND conn.created_org = porder.created_org
			INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`AND mm.sum_all>=2 
			INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND dish.created_org=porder.created_org AND dish.dish_num>0
			INNER JOIN  pos_dish_tag AS tag  ON tag.dish_id=dish.dish_id AND tag.main_flag=1
			WHERE conn.people_num<=4 AND tag.dish_raw <>'其他' 
			GROUP BY conn.member_id,dish.dish_id HAVING COUNT(1)>1  )a
			GROUP BY a.member_Id,a.dish_raw
			ORDER BY member_id,sum1 DESC) 
			AS sub_raw
			INNER JOIN member_tag_att AS att ON att.`att_name`=sub_raw.dish_raw
			# 必须大于10%的才计算
			#WHERE att.`avg`>10
			GROUP BY member_id) AS qry_raw
			HAVING 	final_percent>7.5 


#11.插入TOP3表,此处使用远哥的工具,记得修改flag和数据库,象征性一个例子,明细见插入TOP3食材SQL(人均消费需改成数字)
 SELECT mm.member_id,tag.dish_id,   tag.`dish_name`,COUNT(0)/sum_all * 10 AS rating
FROM   `pos_consumption1` AS conn 
INNER JOIN pos_dining_order AS porder ON conn.consumption_id = porder.consumption_id 
AND    conn.created_org = porder.created_org
 INNER JOIN `member_tag_summary` AS mm ON mm.`member_id`=conn.`member_id`
INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id 
 AND  dish.created_org=porder.created_org
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=dish.dish_id AND tag.main_flag=1
INNER JOIN `member_tag_summary_list` AS lst  ON lst.`member_id` =  mm.`member_id` AND lst.`att_id` = 204
WHERE conn.need_pay_amount/conn.people_num>92.95 #人均消费改为数字
AND conn.people_num<=4
 AND mm.sum_all>=2 
 AND tag.main_flag=1 
AND dish.dish_num>0
AND tag.`dish_cookery`='烧'
GROUP BY mm.`member_id` ,tag.dish_id 	






#得到店人均  ，在下面的查询中会使用到
SELECT SUM(porder.need_pay_amount)/SUM(porder.people_num)*0.8 INTO @avg_peo FROM `pos_consumption1` AS porder;
#  @avg_peo

#得到店会员平均消费周期
SELECT SUM(porder_date_calc.datedif)/SUM(porder_date_calc.con_cou) *1.5 INTO @avg_pay FROM (
SELECT DATEDIFF(MAX(porder.bill_date), MIN(porder.bill_date)) AS datedif,COUNT(0)-1 AS con_cou
FROM `pos_consumption1` AS porder
INNER JOIN `rv_ol_fans` AS fan ON fan.`member_id` = porder.member_id
GROUP BY porder.member_id
HAVING COUNT(0)>1
)
AS porder_date_calc;
#@avg_pay


#查找单次消费的人
#12.(1) 插入会员`member_normal
INSERT INTO `member_normal`
            (`member_id`,
             `last_con_date`,dish_id_arr,dish_name_arr,main_count )
 
 SELECT member_id, 
   last_con_date ,dish_id_arr,dish_name_arr,main_count FROM (
SELECT conn.member_id, 
  conn.bill_date AS last_con_date ,sub_mem_dish.dish_id_arr,sub_mem_dish.dish_name_arr,sub_mem_dish.main_count,conn.people_num
FROM   `pos_consumption1` AS conn
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= conn.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id)  ON fan.fans_id=bind.fans_id  
AND bind.sns_type=1 
# bind.sns_type=1  指微信会员
AND bind.`is_subscribed`=1
# bind.`is_subscribed`=1 已关注

INNER JOIN (
SELECT member_id, GROUP_CONCAT(DISTINCT tag.dish_id ORDER BY tag.dish_id) AS dish_id_arr ,GROUP_CONCAT(tag.dish_name ORDER BY tag.dish_id) AS dish_name_arr ,COUNT(0) AS main_count FROM  
  `pos_dining_order` AS conn
INNER JOIN `pos_order_dish` AS dish ON dish.`dining_order_id`=conn.`order_id` AND dish.`created_org`=conn.`created_org`
INNER JOIN `pos_dish_tag` AS tag ON tag.`dish_id`=dish.`dish_id` AND tag.main_flag=1 AND top_flag=1 
#注意此处AND用法
#AND top_type NOT LIKE '%锅底%'   待考虑
WHERE tag.dish_id<>1  AND conn.`people_num`<=4
AND dish.dish_num>0
GROUP BY member_id
HAVING COUNT(0)>1
) AS sub_mem_dish ON sub_mem_dish.member_id=conn.member_id
# 待学习group_concat 
# conn.order_property=1  订单属性:1-正常订单,2-外卖订单,3-快餐订单
GROUP BY conn.member_id
HAVING COUNT(0)=1 
) a
WHERE people_num <=4;


INSERT INTO `member_normal_list`
            (`member_id`,
             `dish_id`)
SELECT mn.member_id,tag.dish_id FROM `member_normal` AS mn
INNER JOIN  `pos_dining_order` AS conn ON conn.member_id=mn.member_id
INNER JOIN `pos_order_dish` AS dish ON dish.`dining_order_id`=conn.`order_id` AND dish.`created_org`=conn.`created_org`
INNER JOIN `pos_dish_tag` AS tag ON tag.`dish_id`=dish.`dish_id` AND tag.main_flag=1 AND top_flag=1 
#AND top_type NOT LIKE '%锅底%'
WHERE tag.dish_id<>1 AND conn.member_id<>0  AND conn.`people_num`<=4
AND dish.dish_num>0




INSERT INTO  `member_dish_id_arr`
            (`member_id`,
             `dish_id_arr`)
 
SELECT  mem_tag.`member_id`,  GROUP_CONCAT(DISTINCT tag.`dish_id` ORDER BY tag.dish_id )   
FROM  member_tag_summary AS mem_tag
INNER JOIN pos_dining_order AS porder ON porder.member_id = mem_tag.member_id
INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND porder.created_org=dish.created_org
INNER JOIN pos_dish_tag AS tag ON tag.dish_id = dish.dish_id AND tag.main_flag=1 AND tag.top_flag=1 
#AND tag.top_type NOT LIKE '%锅底%'
WHERE 
#特殊菜品去掉 tag.dish_id<>1 
porder.`people_num`<=4   
AND porder.`status_code`=1 
AND porder.order_property=1
AND dish.dish_num>0
GROUP BY mem_tag.`member_id`;


 INSERT INTO  `member_dish_lst`
            ( 
             `member_id`,
             `dish_id`)
 
 
SELECT  mem_tag.`member_id`,   tag.`dish_id`   
FROM  member_tag_summary AS mem_tag
INNER JOIN pos_dining_order AS porder ON porder.member_id = mem_tag.member_id
INNER JOIN pos_order_dish AS dish ON porder.order_id=dish.dining_order_id AND porder.created_org=dish.created_org
INNER JOIN pos_dish_tag AS tag ON tag.dish_id = dish.dish_id AND tag.main_flag=1 AND tag.top_flag=1 
#AND tag.top_type NOT LIKE '%锅底%'
WHERE 
porder.`people_num`<=4  
AND dish.dish_num>0
AND porder.`status_code`=1 
AND porder.order_property=1;
 #AND tag.dish_id<>1 
 
SELECT *  FROM `member_dish_top` ORDER BY con_sum  DESC LIMIT 45

DELIMITER $$

USE 0005285040_pos$$

DROP FUNCTION IF EXISTS `fun_get_top_dish_by_member`$$

CREATE  FUNCTION `fun_get_top_dish_by_member`(in_member_id INT) RETURNS INT(11)
BEGIN
	DECLARE res INT;
  # 找到同时吃过这些菜的人
 
SELECT    mem_tag.dish_id INTO res     FROM member_dish_lst AS mem_tag
INNER JOIN `member_dish_top` AS dtop ON dtop.dish_id=mem_tag.dish_id
INNER JOIN  `member_dish_id_arr` AS mdl ON  mdl.member_id=mem_tag.member_id
WHERE mem_tag.dish_id NOT IN 
(
SELECT dish_id FROM  `member_normal_list` AS lst WHERE  lst.member_id=in_member_id
)
AND mdl.dish_id_arr LIKE CONCAT('%',REPLACE((SELECT dish_id_arr FROM `member_normal` WHERE member_id=in_member_id),',','%'), '%')
AND dtop.con_sum >=100
# concat这一句等同于select * from `member_dish_id_arr` AS mdl  where  mdl.dish_id_arr like '%639%671%'   学习LIKE的用法
GROUP BY dish_id
HAVING COUNT(0) >1
#需要计算菜品排行权重
ORDER BY COUNT(0)*dtop.weight DESC

LIMIT 1
;
	RETURN (res);
END$$

DELIMITER ;

SELECT COUNT(1) FROM 

SELECT * FROM `member_normal`

#使用sqlyog导出下面的查询结果为cc.sql，然后再使用sqlyog  执行cc.sql
SELECT CONCAT('update `member_normal` set rem_dish_id=fun_get_top_dish_by_member(',member_id,') where member_id=',member_id,';') AS usql FROM `member_normal`;

TRUNCATE TABLE member_normal

#更新菜品名
UPDATE `member_normal` 
INNER JOIN pos_dish_tag ON `member_normal`.`rem_dish_id`=pos_dish_tag.`dish_id`
SET `member_normal`.dish_name=pos_dish_tag.`dish_name`;

#9.(2) 推荐食材---猜你喜欢
INSERT INTO `member_fav_dish`
            (
             `member_id`,
             `dish_id`,
             `dish_name`,
             
             
             `flag`,
             dish_type)
SELECT member_id, rem_dish_id, dish_name,2 AS flag,'猜你喜欢' AS dish_type
FROM `member_normal`  WHERE rem_dish_id<>0;


#13.编写最后结果计算函数  手工在`member_type_motive`内填充K1和K2

#（K + K2）* p（个人客单价） =  （聚餐，包括聚餐正餐+1次消费但人数>4）面额
# （K + K2）* p（店平均客单价） =  （非聚餐）面额
#  更新表，作为会员分类+消费动机关联使用

INSERT INTO `member_type_motive`
            ( 
             `member_con_type`,
             `motive` )
 
SELECT member_con_type, motive FROM member_all_summary
GROUP BY member_con_type, motive;

SELECT * FROM `member_type_motive`

UPDATE member_type_motive SET k1=0.10 ,k2=0.0 

陪同 0.18


#9.(3)推荐食材----物品协同

INSERT INTO `member_fav_dish`
            (
             `member_id`,
             `dish_id`,
              
             `dish_raw`,
              
             `flag`)
 

SELECT `member_id`,
             `dish_id`, att_name AS dish_raw, 3 AS flag FROM 
(
SELECT member_id,dish_id,MAX(flag_count) AS flag_count,gflag,
#根据flag反查会员对食材/口味评分最高的
(SELECT lst.att_id FROM member_tag_summary_list AS lst 
    WHERE lst.member_id=sub_top_dish.member_id AND lst.att_id IN (sub_top_dish.gflag)
    ORDER BY lst.percent DESC LIMIT 1
)
AS max_per_att_id,
#根据max_per_att_id 反查会员对  食材/口味类型
(SELECT att.att_name FROM member_tag_att AS att WHERE att.att_id=max_per_att_id
)
AS att_name
FROM (
# 找出会员推荐菜品中所属分类最多的，评分最高的
SELECT top3.member_id,top3.dish_id,COUNT(0) AS flag_count,SUM(top3.rating) AS sum_rating,
GROUP_CONCAT(top3.flag) AS gflag
FROM `member_fav_top3` AS top3
GROUP BY top3.member_id,top3.dish_id
ORDER BY top3.member_id,COUNT(0) DESC,SUM(top3.rating) DESC 
) AS sub_top_dish
 
GROUP BY member_id
)
cc;



UPDATE `member_fav_dish`
INNER JOIN `pos_dish_tag` ON `member_fav_dish`.`dish_id`=`pos_dish_tag`.`dish_id`

SET `member_fav_dish`.dish_name = `pos_dish_tag`.dish_name;



###函数
DELIMITER $$

USE `0005285040_pos`$$

DROP FUNCTION IF EXISTS `fun_get_round_5`$$

CREATE DEFINER=`root`@`%` FUNCTION `fun_get_round_5`(iPrice INT ,k1 FLOAT ,k2 FLOAT ) RETURNS INT(11)
BEGIN
      DECLARE res INT;
      DECLARE me FLOAT; 
      SELECT iPrice *(k1 +k2) INTO me;
      SELECT CASE    
            WHEN    me%10 BETWEEN 3 AND 7  
            THEN     (FLOOR(me /10)*10+5)     
            ELSE    (ROUND(me  /10)*10)    
      END INTO   res  ;
    RETURN    (res);
    END$$

DELIMITER ;



#_______________________________________________________________________________________________________________________________________________________________________
#13.求最终结果!

#（店平均客单价） =  （非聚餐）面额
SELECT SUM(porder.need_pay_amount)/COUNT(0) INTO @avg_peo FROM `pos_consumption1` AS porder
WHERE porder.people_num<=4 ;
SELECT @avg_peo;
SELECT fun_get_round_5(@avg_peo,0.1,0);

TRUNCATE TABLE `dish_tag_end`
INSERT INTO `dish_tag_end`

SELECT  mem_all.`member_id`,mem_all.`open_id`,mem_all.`sum_all`,mem_all.`motive`,
mem_all.member_con_type,
CASE 
     WHEN all_know_mem.dish_id IS NULL
     THEN '-'
     ELSE  all_know_mem.dish_id
END 
 AS  '推荐美食_ID',
CASE 
     WHEN all_know_mem.dish_name IS NULL
     THEN '-'
     ELSE  all_know_mem.dish_name
END  AS '推荐美食',  all_know_mem.att_name AS '食材',
all_know_mem.dish_price AS dish_price1,  
CASE WHEN all_know_mem.dish_id>0 
THEN
	CASE WHEN all_know_mem.me*(member_type_motive.k1+member_type_motive.k2) >=20
	THEN
		
	
		CASE WHEN all_know_mem.dish_price >= fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)*0.75 AND  all_know_mem.dish_price <= fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)*1.25
		THEN all_know_mem.dish_price 
		WHEN all_know_mem.dish_price < fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)*0.75  
		THEN fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)
		ELSE fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)
		
		END
	ELSE
		CASE WHEN all_know_mem.dish_price >= ROUND(all_know_mem.me*(member_type_motive.k1+member_type_motive.k2))*0.75 AND all_know_mem.dish_price <= ROUND(all_know_mem.me*(member_type_motive.k1+member_type_motive.k2))*1.25
		THEN all_know_mem.dish_price 
		ELSE fun_get_round_5(all_know_mem.me,member_type_motive.k1,member_type_motive.k2)
	       	END
	 
	END
ELSE 
	CASE WHEN all_know_mem.me*(member_type_motive.k1+member_type_motive.k2) >=100
	THEN CEILING(all_know_mem.me*(member_type_motive.k1+member_type_motive.k2) /10)*10 
	#ELSE fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2)
	ELSE fun_get_round_5(all_know_mem.me,member_type_motive.k1,member_type_motive.k2)
	END
END
 AS  '面额'
  ,

-- CONCAT(all_know_mem.me,'*',member_type_motive.k1,'*',member_type_motive.k2) AS formu,
 CASE WHEN @avg_peo >120  
 THEN
	CASE WHEN  ROUND(fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2) *3/10)*10+18 >  CEIL(@avg_peo*0.6)+8
	THEN ROUND(fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2) *3/10)*10+18 
	ELSE ROUND(@avg_peo*0.6,-1)+8
	END
 ELSE  CASE WHEN  ROUND(fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2) *3/10)*10+8 >  CEIL(@avg_peo*0.6)+8
	THEN ROUND(fun_get_round_5(all_know_mem.me ,member_type_motive.k1 ,member_type_motive.k2) *3/10)*10+8 
	ELSE ROUND(@avg_peo*0.6,-1)+8
	END 
 END AS '使用条件'
 
 FROM `member_all_summary` AS mem_all
INNER JOIN  member_type_motive ON mem_all.member_con_type = member_type_motive.member_con_type AND mem_all.motive = member_type_motive.motive
LEFT JOIN  `member_tag_summary` AS summ ON summ.`member_id` = mem_all.`member_id`

LEFT JOIN 
(
SELECT fav.member_id,fav.dish_id,fav.dish_name,tag.dish_price,percent,ROUND(@avg_peo) AS me,@avg_peo AS xytj FROM  `member_fav_dish` AS fav  
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav.dish_id
WHERE fav.flag=0
GROUP BY member_id
) AS gd ON gd.member_id=summ.`member_id`


LEFT JOIN 
(
SELECT fav.member_id,  fav.dish_id,fav.dish_name,'重复点选' AS att_name,@avg_peo AS me,tag.dish_price FROM  `member_fav_dish` AS fav
INNER JOIN `member_tag_summary` AS summ ON summ.`member_id`=fav.`member_id`
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav.dish_id
 WHERE fav.flag='1'
 AND summ.motive IN('正餐常规','正餐单人')
GROUP BY member_id 

UNION ALL
SELECT fav.member_id,  fav.dish_id,fav.dish_name,'重复点选' AS att_name,ROUND(SUM(porder.need_pay_amount)/COUNT(0)/10)*10 AS me,tag.dish_price FROM  `member_fav_dish` AS fav
INNER JOIN `member_tag_summary` AS summ ON summ.`member_id`=fav.`member_id`
INNER JOIN `pos_consumption1` AS porder ON porder.member_id = summ.member_id
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav.dish_id
 WHERE fav.flag='1'
 AND summ.motive IN('简餐用户')
GROUP BY member_id 


UNION ALL 
 ##物品协同
SELECT fav.member_id, fav.dish_id,fav.dish_name,'猜你喜欢2' AS att_name,@avg_peo AS me,tag.dish_price FROM  `member_fav_dish` AS fav 
INNER JOIN `member_tag_summary` AS summ ON summ.`member_id`=fav.`member_id`
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav.dish_id
WHERE fav.flag=3
AND fav.member_id IN (
# 得到没有重复点选菜的会员
  SELECT summ.`member_id` 
   FROM  `member_tag_summary` AS summ 
   WHERE
   summ.member_id NOT IN (
  SELECT member_id  FROM  `member_fav_dish` AS fav  WHERE fav.flag=1
   ) 
 )
 AND summ.motive IN('正餐常规','正餐单人')
 GROUP BY fav.member_id
 
 
 UNION ALL 
 ##物品协同
SELECT fav.member_id, fav.dish_id,fav.dish_name,'猜你喜欢2' AS att_name,ROUND(SUM(porder.need_pay_amount)/COUNT(0)/10)*10 AS me ,tag.dish_price FROM  `member_fav_dish` AS fav 

INNER JOIN `member_tag_summary` AS summ ON summ.`member_id`=fav.`member_id`
INNER JOIN `pos_consumption1` AS porder ON porder.member_id = summ.member_id
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav.dish_id
WHERE fav.flag=3
AND fav.member_id IN (
# 得到没有重复点选菜的会员
  SELECT summ.`member_id` 
   FROM  `member_tag_summary` AS summ 
   WHERE
   summ.member_id NOT IN (
  SELECT member_id  FROM  `member_fav_dish` AS fav  WHERE fav.flag=1
   ) 
 )
 AND summ.motive IN('简餐用户')
 GROUP BY fav.member_id
 
 
 
 
 UNION ALL
 # 单次
SELECT  fav_dish.member_id, fav_dish.dish_id,fav_dish.dish_name,'猜你喜欢1' AS att_name, @avg_peo AS me,tag.dish_price FROM member_fav_dish AS fav_dish 
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav_dish.dish_id
INNER JOIN member_all_summary AS c ON fav_dish.member_id=c.member_id
WHERE fav_dish.flag=2
AND c.motive LIKE '%正餐%'
UNION ALL

SELECT  fav_dish.member_id, fav_dish.dish_id,fav_dish.dish_name,'猜你喜欢1' AS att_name, @avg_peo AS me,tag.dish_price FROM member_fav_dish AS fav_dish 
INNER JOIN pos_dish_tag AS tag ON tag.dish_id=fav_dish.dish_id
INNER JOIN pos_consumption AS d ON fav_dish.member_id=d.member_id
INNER JOIN member_all_summary AS c ON fav_dish.member_id=c.member_id
WHERE fav_dish.flag=2
AND c.motive LIKE '%简餐%'
 

UNION ALL
#聚餐推荐结果
SELECT porder.member_id, 0 AS dish_id,'代金券' AS dish_name,'聚餐点选' AS att_name,  ROUND(porder.need_pay_amount/10) * 10 AS me,0  AS dish_price FROM `pos_consumption1` AS porder
WHERE  porder.people_num>4   
AND porder.member_id IN (SELECT member_id FROM `member_all_summary` WHERE member_con_type LIKE '流失用户' OR member_con_type LIKE '普通用户')

GROUP BY porder.member_id
HAVING COUNT(0)=1

UNION ALL

SELECT porder.member_id, 0 AS dish_id,'代金券' AS dish_name,'聚餐点选' AS att_name,ROUND(SUM(porder.need_pay_amount)/COUNT(0)/10)*10 AS me,0 AS dish_price FROM
   `member_all_summary` AS mem_all
INNER JOIN (SELECT member_id,need_pay_amount FROM pos_consumption1 WHERE people_num>4) AS porder ON porder.member_id = mem_all.member_id
WHERE  mem_all.motive ='正餐聚餐'
GROUP BY porder.member_id

UNION ALL

SELECT porder.member_id, 0 AS dish_id,'代金券' AS dish_name,'聚餐点选' AS att_name,ROUND(SUM(porder.need_pay_amount)/COUNT(0)/10)*10 AS me,0 AS dish_price FROM
   `member_all_summary` AS mem_all
INNER JOIN `pos_consumption1` AS porder ON porder.member_id = mem_all.member_id
WHERE porder.people_num>4    
AND mem_all.motive ='简餐聚餐'
GROUP BY porder.member_id

UNION ALL
##常规简餐和工作餐推送代金券
SELECT porder.member_id, 13 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,ROUND(SUM(porder.need_pay_amount)/COUNT(0)/10)*10 AS me,0 AS dish_price FROM
   `member_all_summary` AS mem_all
INNER JOIN pos_consumption1 AS porder ON porder.member_id = mem_all.member_id

WHERE  mem_all.motive ='简餐用户'
AND  porder.member_id NOT IN(SELECT DISTINCT member_id FROM `member_fav_dish`)
GROUP BY porder.member_id

UNION ALL
##陪同用户和潜在用户推送热销菜品
SELECT member_id, 13 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,@avg_peo AS me,0 AS dish_price FROM
   `member_all_summary` AS mem_all 
WHERE  mem_all.member_con_type IN('潜在用户')
GROUP BY member_id

UNION ALL
##陪同用户和潜在用户推送热销菜品
SELECT member_id, 13 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,@avg_peo  AS me,0 AS dish_price FROM
   `member_all_summary` AS mem_all
WHERE  mem_all.member_con_type IN('陪同用户')
GROUP BY member_id

UNION ALL

SELECT porder.member_id, 0 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,  @avg_peo AS me,0  AS dish_price 
FROM `member_all_summary` AS porder
WHERE  porder.member_con_type IN('流失用户','普通用户')
AND porder.member_id NOT IN(SELECT DISTINCT member_id FROM `member_fav_dish`)
AND porder.member_id NOT IN (SELECT porder.member_id FROM `pos_consumption1` AS porder
WHERE  porder.people_num>4   
AND porder.member_id IN (SELECT member_id FROM `member_all_summary` WHERE member_con_type LIKE '流失用户' OR member_con_type LIKE '普通用户')
GROUP BY porder.member_id
HAVING COUNT(0)=1)
AND porder.motive LIKE '%正餐%'
GROUP BY porder.member_id

UNION ALL
SELECT porder.member_id, 0 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,  @avg_peo   AS me,0  AS dish_price 
FROM `member_all_summary` AS porder
INNER JOIN pos_consumption AS c ON porder.member_id=c.member_id
WHERE  porder.member_con_type IN('流失用户','普通用户')
AND porder.member_id NOT IN(SELECT DISTINCT member_id FROM `member_fav_dish`)
AND porder.member_id NOT IN (SELECT porder.member_id FROM `pos_consumption1` AS porder
WHERE  porder.people_num>4   
AND porder.member_id IN (SELECT member_id FROM `member_all_summary` WHERE member_con_type LIKE '流失用户' OR member_con_type LIKE '普通用户')
GROUP BY porder.member_id
HAVING COUNT(0)=1)
AND porder.motive LIKE '%简餐%'
GROUP BY porder.member_id



#) as cc 
#where cc.dish_id is null
UNION ALL 

SELECT a.member_id, 0 AS dish_id,'爽口嫩肉' AS dish_name,'热销菜品' AS att_name,  @avg_peo AS me,0  AS dish_price 
FROM `member_tag_summary` a
WHERE a.member_id NOT IN (SELECT member_id FROM `member_fav_dish`)
AND a.motive !='正餐聚餐'
AND a.motive !='简餐用户'
AND a.motive !='简餐聚餐'
GROUP BY a.member_id

) AS all_know_mem ON all_know_mem.member_id=mem_all.member_id;





SELECT * FROM `dish_tag_end`;


#根据上面的普遍的值再插入之前被去掉了的那部分异常消费的值
INSERT INTO `dish_tag_end`
SELECT * FROM (
SELECT a.member_id,b.open_id, a.sum_all,'-' AS motive ,'消费异常用户' AS member_con_type,'' AS dish_id, '代金券'AS dish_name, '代金券' AS dish_raw,'0' AS dish_price,'' '35' AS money, '128' AS usemoney
  FROM (SELECT member_id,COUNT(1)AS sum_all FROM pos_consumption a WHERE a.status_code=1
AND a.order_property=1
AND a.member_id<>0
AND a.member_id<>1 
AND a.member_id NOT IN (SELECT member_id FROM pos_consumption1)
AND a.member_id NOT IN (SELECT member_id FROM `dish_tag_end`)
GROUP BY member_id)a 
LEFT JOIN( SELECT fan.member_id, bind.open_id  FROM  (
SELECT member_id  FROM   `pos_consumption1` AS conn
GROUP BY conn.member_id
) AS abc
INNER JOIN `rv_ol_fans` AS fan  ON fan.`member_id`= abc.member_id
INNER JOIN `0005285040_baseinfo`.`ol_fans_sns_bind` AS bind USE INDEX (idx_fans_id) ON fan.fans_id=bind.fans_id AND bind.sns_type=1 AND bind.`is_subscribed`=1) b ON a.member_id=b.member_id
 ) a


SELECT a.*,b.* FROM `memberuse` a LEFT JOIN (SELECT DISTINCT getname,money FROM `result`)b ON a.usename=b.getname
WHERE usename  LIKE '%代金券%'


(SELECT DISTINCT getname,money FROM `result`)b
